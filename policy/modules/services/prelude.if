## <summary>Prelude hybrid intrusion detection system</summary>

########################################
## <summary>
##	Execute a domain transition to run prelude.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`prelude_domtrans',`
	gen_require(`
		type prelude_t, prelude_exec_t;
	')

	domtrans_pattern($1, prelude_exec_t, prelude_t)
')

########################################
## <summary>
##	Execute a domain transition to run prelude_audisp.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`prelude_domtrans_audisp',`
	gen_require(`
		type prelude_audisp_t, prelude_audisp_exec_t;
	')

	domtrans_pattern($1, prelude_audisp_exec_t, prelude_audisp_t)
')

########################################
## <summary>
##	Signal the prelude_audisp domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed acccess.
## </summary>
## </param>
#
interface(`prelude_signal_audisp',`
	gen_require(`
		type prelude_audisp_t;
	')

	allow $1 prelude_audisp_t:process signal;
')

########################################
## <summary>
##	All of the rules required to administrate 
##	an prelude environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`prelude_admin',`
	gen_require(`
		type prelude_t, prelude_spool_t;
		type prelude_var_run_t, prelude_var_lib_t;
		type prelude_audisp_t, prelude_audisp_var_run_t;
	')

	allow $1 prelude_t:process { ptrace signal_perms };
	ps_process_pattern($1, prelude_t)

	allow $1 prelude_audisp_t:process { ptrace signal_perms };
	ps_process_pattern($1, prelude_audisp_t)

	manage_files_pattern($1, prelude_spool_t, prelude_spool_t)

	manage_files_pattern($1, prelude_var_lib_t, prelude_var_lib_t)

	manage_files_pattern($1, prelude_var_run_t, prelude_var_run_t)

	manage_files_pattern($1, prelude_audisp_var_run_t, prelude_audisp_var_run_t)
')
